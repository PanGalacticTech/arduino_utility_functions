


/*

            /////// EEPROM Time-Tracking Function \\\\\\\\\\\

            Simple script to keep track of time passing, by
            saving bytes into EEPROM/Flash Memory at specific intervals, to be
            recalled on Microcontroller Boot up.

            On bootup the number of intervals passed is calculated from the memory address
            of the first different byte in the EEPROM memory. From this it is possible to work out 
            how long the device was switched on, in order to carry out regular functions, like
            recalibrations or cleaning routiens that may need to happen on a weekly basis
            with the unit shut down overnight.


             The Specific Implimentation is designed to reduce
             the number of writes to memory, especially 
             large block wipes, in order to conserve the
             lifetime of the microcontroller.


             


*/




#include <EEPROM.h>


//#define EEPROM_SIZE 1



bool readNOW = false;    // Used to trigger read of all eeprom memory

//int memorySize = 512;   only ATmega168
int memorySize = 1024;





uint16_t n = 0;   // essensially a 1 hour loop counter counts up one every hour

//uint32_t recordTime = 3600000;    // 1h in milliseconds

// Variables to split up when to record an interval of time passing

uint32_t recordTimeMILLIS = 0;

uint32_t recordTimeSECONDS = 1;  //

uint32_t recordTimeMINS = 0;

uint32_t recordTimeHOURS = 0;


int delayDays = 7;  // variable to record the amount of days we want to track between doing tasks.


uint32_t currentMillis = 0;

byte writeByte = 1;   // These values can be used to expand the writing of each bit to include all values instead of just 1 or 0



byte readByte = 0;    // They will be read from the 1st and last bytes of the memory, the 1st will be the writebyte, the last will be the readbyte

// the recall loop will carry on rolling through the memory address, reading the write byte untill it finds a read bite.







void setup() {

  Serial.begin(115200);

  //  EEPROM.begin(EEPROM_SIZE);   // Set Up EEPROM

  calculateMillis();           // Calculate the time to write a new byte to EEPROM

  recallInterval();            // Recall the time passed while unit was switched on.


}





void loop() {


  saveInterval();

  //  readEEPROM();   // Gives a readout of every memory address when readNOW == true


}







/*





    Suggest saving a byte into eeprom every hour, with address n+1,

    total EEPROM/FLASH addresses = 512:
    Save number from 0 to 255 in each:


    when n = 168, 336, or 504 then one week has passed and autoclean is triggered

    if n > 508  n=0

    Save this intoinflux db for record keeping


    this means entire eeprom is being written to once every 3 weeks.

    total writes expected on eeprom 100,000

    so it should last 300,000 weeks

    5796 years.

    I think thats good enough/

    Flash memory could be only 10,000 writes

    30,000 weeks

    576.9 years.

    Probably still be fine either way.





*/




void calculateMillis() {

  // Work out recordTime in Millis   // This is so much overkill but it seem elegant
  // Only Needs to be run once during setup


  if (recordTimeHOURS > 0) {
    recordTimeMINS = recordTimeHOURS * 60;
  }
  if (recordTimeMINS > 0) {
    recordTimeSECONDS = recordTimeMINS * 60;
  }
  if (recordTimeSECONDS > 0) {
    recordTimeMILLIS = recordTimeSECONDS * 1000;
  }

  Serial.print("record Time Millis: ");
  Serial.println(recordTimeMILLIS);
  Serial.println(" ");

}






// This script saves the interval outlined above
void saveInterval() {


  // Recording Hours Passing

  if (millis() - currentMillis >= recordTimeMILLIS) {

    Serial.print("Saving Byte \"");
    Serial.print(writeByte);
    Serial.println("\" in EEPROM");

    Serial.println(" ");
    Serial.print("n: ");
    Serial.println(n);
    Serial.println(" ");

    EEPROM.write(n, writeByte);     // write a 1 into address space n
    //   EEPROM.commit();




    if (n == 168 || n == (168 * 2) || n == (168 * 3) || n == (168 * 4) || n == (168 * 5) || n >= (168 * 6)) {   // if n has reached the 1 week mark
      Serial.println(" ");
      Serial.print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  ");
      Serial.print("Perform Timed Action Now");
      Serial.print("  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
      Serial.println(" ");
      Serial.println(" ");
    }



    currentMillis = millis();
    Serial.println(" ");
    Serial.print("current Millis: ");
    Serial.println(currentMillis);
    Serial.println(" ");
    n++;     // ins

    readNOW = true;       // testing line, sets all memory to read out after trying to write something to it.
  }


  // Resetting of Recording when running out of memory locations

  if (n > (168 * 6)) {     // If we are running out of memory locations

    n = 0;                         // reset n
    writeByte++;                    //increment writeByte
  }

  if (writeByte >= 255) {         // if run out of ints to save in memory addresses (every address should read 255...etc)

    writeByte = 0;
    EEPROM.write(0, writeByte);     // write 0 into the first byte of the memory to start the entire loop over again. No need to erase the memory
    // in one go
  }



}





// this script recalls the interval as outlined above, this only needs to run once on start up, it runs through
// the eeprom memory, untill it finds a 0 or NOT a 1, and saves the number of the address as the number of n
void recallInterval() {


  readByte = EEPROM.read(0);     // read the very first byte whatever value this returns is used as our figure we assume to be written already
  // we read untill we find something different, then we assume that this is how much time has passed.

  int eepromRead = readByte; //

  Serial.print("readByte: ");
  Serial.println(readByte);
  Serial.println(" ");

  int i = 0;

  Serial.println("Reading EEprom");

  while (eepromRead == readByte) {

    eepromRead = EEPROM.read(i);    // reads eeprom addresses untill it no longer reads equal then exits the loop

    Serial.print(i);
    Serial.print(" :  ");
    Serial.print(eepromRead);
    Serial.println(" ");
    n = i;
    i++;

    if (i >= memorySize) {
      readByte = readByte + 1; // Pre emptive bug fix/edge case to force loop exit
      writeByte = readByte;
      n = 0;                    // if all items are the same then memory writing needs to start at zero again.
    }


  }  // when the loop exits, whichever number of i it ended up at is the number of n used to track cleaning cycles

  Serial.println("Found !readByte");
  Serial.println(n);
  Serial.println(" ");
  Serial.println(" ");

  writeByte = readByte;    // This line could be problematic.  exploration below

}




// Utility to read the entire contence of the EEPROM or Flash Memory

// Maximum memory size = 1024 bytes



void readEEPROM() {


  if (readNOW) {

    int k = 0;

    Serial.println("EEPROM Read: ");
    Serial.println(" ");

    for (int i = 0; i < memorySize; i++) {


      k = EEPROM.read(i);

      Serial.print(i);
      Serial.print(" : ");
      Serial.println(k);

    }
    readNOW = false;
  }
}



// Utility to reset all Memory in EEPROM - use Sparingly

void resetEEPROM() {





}
